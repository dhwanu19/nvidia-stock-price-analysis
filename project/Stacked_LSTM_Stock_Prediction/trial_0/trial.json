{"trial_id": "0", "hyperparameters": {"space": [{"class_name": "Choice", "config": {"name": "layer1_units", "default": 10, "conditions": [], "values": [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], "ordered": true}}, {"class_name": "Int", "config": {"name": "num_layers", "default": null, "conditions": [], "min_value": 2, "max_value": 15, "step": 1, "sampling": "linear"}}, {"class_name": "Int", "config": {"name": "units0", "default": null, "conditions": [], "min_value": 10, "max_value": 150, "step": 10, "sampling": "linear"}}, {"class_name": "Int", "config": {"name": "units1", "default": null, "conditions": [], "min_value": 10, "max_value": 150, "step": 10, "sampling": "linear"}}, {"class_name": "Choice", "config": {"name": "last_lstm_units", "default": 50, "conditions": [], "values": [50, 100, 150], "ordered": true}}, {"class_name": "Choice", "config": {"name": "rate", "default": 0.3, "conditions": [], "values": [0.3, 0.4, 0.5, 0.6, 0.7], "ordered": true}}, {"class_name": "Int", "config": {"name": "units2", "default": null, "conditions": [], "min_value": 10, "max_value": 150, "step": 10, "sampling": "linear"}}, {"class_name": "Int", "config": {"name": "units3", "default": null, "conditions": [], "min_value": 10, "max_value": 150, "step": 10, "sampling": "linear"}}, {"class_name": "Int", "config": {"name": "units4", "default": null, "conditions": [], "min_value": 10, "max_value": 150, "step": 10, "sampling": "linear"}}, {"class_name": "Int", "config": {"name": "units5", "default": null, "conditions": [], "min_value": 10, "max_value": 150, "step": 10, "sampling": "linear"}}, {"class_name": "Int", "config": {"name": "units6", "default": null, "conditions": [], "min_value": 10, "max_value": 150, "step": 10, "sampling": "linear"}}, {"class_name": "Int", "config": {"name": "units7", "default": null, "conditions": [], "min_value": 10, "max_value": 150, "step": 10, "sampling": "linear"}}, {"class_name": "Int", "config": {"name": "units8", "default": null, "conditions": [], "min_value": 10, "max_value": 150, "step": 10, "sampling": "linear"}}, {"class_name": "Int", "config": {"name": "units9", "default": null, "conditions": [], "min_value": 10, "max_value": 150, "step": 10, "sampling": "linear"}}, {"class_name": "Int", "config": {"name": "units10", "default": null, "conditions": [], "min_value": 10, "max_value": 150, "step": 10, "sampling": "linear"}}, {"class_name": "Int", "config": {"name": "units11", "default": null, "conditions": [], "min_value": 10, "max_value": 150, "step": 10, "sampling": "linear"}}, {"class_name": "Int", "config": {"name": "units12", "default": null, "conditions": [], "min_value": 10, "max_value": 150, "step": 10, "sampling": "linear"}}, {"class_name": "Int", "config": {"name": "units13", "default": null, "conditions": [], "min_value": 10, "max_value": 150, "step": 10, "sampling": "linear"}}], "values": {"layer1_units": 60, "num_layers": 14, "units0": 70, "units1": 140, "last_lstm_units": 150, "rate": 0.3, "units2": 10, "units3": 10, "units4": 10, "units5": 10, "units6": 10, "units7": 10, "units8": 10, "units9": 10, "units10": 10, "units11": 10, "units12": 10, "units13": 10}}, "metrics": {"metrics": {}}, "score": null, "best_step": 0, "status": "FAILED", "message": "Traceback (most recent call last):\n  File \"c:\\Users\\dhwan\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\keras_tuner\\src\\engine\\base_tuner.py\", line 273, in _try_run_and_update_trial\n    self._run_and_update_trial(trial, *fit_args, **fit_kwargs)\n  File \"c:\\Users\\dhwan\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\keras_tuner\\src\\engine\\base_tuner.py\", line 238, in _run_and_update_trial\n    results = self.run_trial(trial, *fit_args, **fit_kwargs)\n              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\dhwan\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\keras_tuner\\src\\engine\\tuner.py\", line 314, in run_trial\n    obj_value = self._build_and_fit_model(trial, *args, **copied_kwargs)\n                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\dhwan\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\keras_tuner\\src\\engine\\tuner.py\", line 233, in _build_and_fit_model\n    results = self.hypermodel.fit(hp, model, *args, **kwargs)\n              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\dhwan\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\keras_tuner\\src\\engine\\hypermodel.py\", line 149, in fit\n    return model.fit(*args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\dhwan\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\keras\\utils\\traceback_utils.py\", line 70, in error_handler\n    raise e.with_traceback(filtered_tb) from None\n  File \"C:\\Users\\dhwan\\AppData\\Local\\Temp\\__autograph_generated_filex4keghgr.py\", line 18, in tf__train_function\n    raise\nValueError: in user code:\n\n    File \"c:\\Users\\dhwan\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\keras\\engine\\training.py\", line 1284, in train_function  *\n        return step_function(self, iterator)\n    File \"c:\\Users\\dhwan\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\keras\\engine\\training.py\", line 1268, in step_function  **\n        outputs = model.distribute_strategy.run(run_step, args=(data,))\n    File \"c:\\Users\\dhwan\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\keras\\engine\\training.py\", line 1249, in run_step  **\n        outputs = model.train_step(data)\n    File \"c:\\Users\\dhwan\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\keras\\engine\\training.py\", line 1050, in train_step\n        y_pred = self(x, training=True)\n    File \"c:\\Users\\dhwan\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\keras\\utils\\traceback_utils.py\", line 70, in error_handler\n        raise e.with_traceback(filtered_tb) from None\n    File \"c:\\Users\\dhwan\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\keras\\engine\\input_spec.py\", line 298, in assert_input_compatibility\n        raise ValueError(\n\n    ValueError: Input 0 of layer \"sequential\" is incompatible with the layer: expected shape=(None, 100, 1), found shape=(None, 1, 6)\n\n"}